import React from 'react';
import ProductCard from './app/ProductCard'
import Header from './app/Header'
import Navigation from './app/Navigation'
import Footer from './app/Footer'
import productDataBase from './data/products.json'
import productCategories from './data/categories.json'

import sushi_main from './data/sushi_main.png'

let space = (document.documentElement.clientWidth-1024) / 2;
let root = document.querySelector(':root');
root.style.setProperty('--padding', `${space}px`);

const styles = {
  app: {
    // paddingLeft: space,
    // paddingRight: space,
  },
  banner: {
    paddingTop: '40px',
    background: `content-box right bottom 25% no-repeat url(${sushi_main})`
  }
}

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      lang: 'ENG',
      cities: ['St. Petersburg', 'Moscow', 'Omsk', 'California'],
      userName: 'Login',
      maxValueForOrder: 12,
      totalCost: 0,
      orderVisibility: { visibility: 'visible' }, // visible / hidden
      orderList: {}
    };

    this.makeCatalog = this.makeCatalog.bind(this);
    this.makeHeading = this.makeHeading.bind(this);
    this.setOrder = this.setOrder.bind(this);
  }

  setOrder(product, op) {
    let orderList = this.state.orderList;
    switch (op) {
      case 'ink':
        if (typeof(orderList[product]) !== 'number') {orderList[product] = 0};

        orderList[product] = orderList[product] + 1;

        break;
      case 'dec':
        orderList[product] = orderList[product] - 1;

        if (orderList[product] === 0) {delete orderList[product]}

        break;
      default:
        return console.error("Valid second argumet are: 'ink', 'dec'");
    }

    this.setState({orderList: orderList})
  }

  makeOrder() {
    let productsByCategories = Object.keys(productDataBase).map(category => {
        let product = productDataBase[category].map(productData => {
          if (this.state.orderList[productData.id] !== undefined) {
            return (
              <li key={productData.id}>
                <ProductCard productData={productData}
                    value={this.state.orderList[productData.id]}
                    maxValue={this.state.maxValueForOrder}
                    setOrder={this.setOrder}/>
              </li>
            )
          } else {
            return undefined;
          }
        })

        return (
          <ul className="OrderList">
            {product}
          </ul>
        )
    })

    return (
      <div className="Order" style={this.state.orderVisibility}>
        <h2>Ваш заказ</h2>
        {productsByCategories}
      </div>
    )
  }

  makeCatalog() { //build list of products from productDataBase (sorted by categories)
    let productsByCategories = Object.keys(productDataBase).map(category => {
        let product = productDataBase[category].map(productData => {
          return (
            <li key={productData.id}>
              <ProductCard productData={productData}
                  value={this.state.orderList[productData.id]}
                  maxValue={this.state.maxValueForOrder}
                  setOrder={this.setOrder}/>
            </li>
          )
        })

        return (
          //if key in productDataBase consist more than one word it crash?
          <li key={category} id={category}>
            <h2>
              {category}
            </h2>
            <ul className="ListOfProducts">
              {product}
            </ul>
          </li>
        )
    })

    return (
      <ul className="ProductsByCategories">
        {productsByCategories}
      </ul>
    )
  }

  makeHeading() {
    let categories = productCategories.map(category => {
      let hrefID = "#" + category.name; //id <li> with category name generated by makeCatalog()
      let liIcon = {backgroundImage: `url(${category.icon})`}

      return (
        <a key={category.name} href={hrefID}>
          <li style={liIcon}> {category.name} </li>
        </a>
      )
    })

    return (
      <ul className="ListOfCategories">
        {categories}
      </ul>
    )
  }

  makeBanner() {
    return (
      <div className="Banner" style={styles.banner}>
        <Navigation />
        <h1>Бесплатная доставка при заказе</h1>
        <h2>от 800 руб.</h2>
        <button>Перейти к заказу</button>
      </div>
    )
  }

  render() {
    return (
      <div className="App" style={styles.app}>
        <Header lang={this.state.lang}
                cities={this.state.cities}
                userName={this.state.userName}
                totalCost={this.state.totalCost}
                makeOrder={this.makeOrder}/>

        {this.makeBanner()}
        {this.makeHeading()}
        {this.makeCatalog()}
        {this.makeOrder()}

        <Footer />
      </div>
    );
  }
}

export default App;
